import java.util.HashMap;
import java.util.Map;

public class Solution {
    public int maxPoints(int[][] points) {
        if (points.length <= 2) {
            return points.length;
        }
        
        int maxPoints = 2;
        
        for (int i = 0; i < points.length; i++) {
            Map<String, Integer> slopeCount = new HashMap<>();
            int duplicate = 0, vertical = 0, localMax = 0;
            
            for (int j = i + 1; j < points.length; j++) {
                int deltaX = points[j][0] - points[i][0];
                int deltaY = points[j][1] - points[i][1];
                
                if (deltaX == 0 && deltaY == 0) {
                    duplicate++;
                    continue;
                } else if (deltaX == 0) {
                    vertical++;
                } else {
                    int gcd = gcd(deltaX, deltaY);
                    String slope = (deltaY / gcd) + "/" + (deltaX / gcd);
                    slopeCount.put(slope, slopeCount.getOrDefault(slope, 0) + 1);
                    localMax = Math.max(localMax, slopeCount.get(slope));
                }
            }
            
            localMax = Math.max(localMax, vertical) + duplicate + 1;
            maxPoints = Math.max(maxPoints, localMax);
        }
        
        return maxPoints;
    }
    
    private int gcd(int a, int b) {
        if (b == 0) return a;
        return gcd(b, a % b);
    }
}
